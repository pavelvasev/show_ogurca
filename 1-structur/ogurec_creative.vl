import components.creative_points

Scene  {
    text: "Структура огурца"

    info: "Отображение тетраэдральной сетки сердечного желудочка. Укажите файл в формате GEO.<br>
         Двойной клик на изображении - выбрать тетраэдр.
    "

    BackgroundImageUser {
      //ctag: "left"
    }
  

    id: theScene

    property var shader: []

    property alias file: fs.file
    FileParam {
        text: "Укажите файл *.GEO"
        property var tag: "left"
        id: fs
        visible: false
        value: Qt.resolvedUrl( "0.geo" )
        //value: Qt.resolvedUrl( "231.geo" )
    }

    Param {
        id: wireParam
        title: "wire on"
        values: ["нет","да"]
    }
    Param {
        id: oParam
        title: "opacity"
        min:0
        max:100
        value:83
    }


    TetrameshGeoLoad {
        //src: "init0.geo"
        src: Qt.resolvedUrl( fs.file )
        id: tetra

            TetrameshZFilter2 {
                id: tetraz
                zParam.value: 50
              //TetrameshRotate {
           
                TetrameshAsTrimesh  {
                    title: "Main body of zheludochek after ZFilter"
                    id:tetra
                    opacity: oParam.value/100
                    wireon: wireParam.value > 0
                    visible: oParam.value > 0
                    color: [1,1,1]
                    ///color: sceneColor2
                    //color: [0,1,0]
                    //color: 0x3cb371 //0x66cdaa
                    //color: 0xffffff
                    // shading: paramShading.value
/*
                    OscRotate{
                      id: osr
  function process2() {
    var r = 2;
    osr.acc[0] = Math.ceil( osr.acc[0] / r) * r;
    osr.acc[1] = Math.ceil( osr.acc[1] / r) * r;
    //osr.rx.value = -(osr.acc[0]-60);
    osr.rz.value = osr.acc[0]-60;
  }

  function process() {
    var r = 2;
    osr.acc[0] = Math.ceil( osr.acc[0] / r) * r;
    osr.acc[1] = Math.ceil( osr.acc[1] / r) * r;
    //osr.rx.value = -(osr.acc[0]-60);
    var q = osr.acc[0]-60;
    //if (q > 30) osr.rz.value = osr.rz.value + 0.1; else if (q < -30)  osr.rz.value = osr.rz.value - 0.1;
    if (Math.abs(q) > 20) osr.rz.value = osr.rz.value + q / 100; 

    var q1 = (osr.acc[1]-60);
    if (Math.abs(q1) > 20) osr.ry.value = osr.ry.value + q1 / 100; 
    //if (Math.abs(q1) > 20) osr.rs.value = Math.max( 1, osr.rs.value + q1/700); 

  }
                    }
*/

                    //Component.onCompleted: {
                    //  debugger; 
                    //}
        
                    shader: [shader1].concat( theScene.shader );
                    
                    /*
                    materials: [p1]
                    TheMaterial {
                      id: p1
                      shading: 2
                      metal: true
                      //shine: pShine.value
                      //      emissive: 0xffff00
                      //      color: 0xff0000
                      //      specular:0xff0000
                    }
                    */
                    /*
                    LambertMaterial {
                      id: p2
                      color: [1,1,1]
                      //shading: 2
                      //      emissive: 0xffff00
                      //      color: 0xff0000
                      //      specular:0xff0000
                    }
                    */

                }

                TetrameshCenters {
                    CreativePoints {
                      ctag: "left"
                    //Points {
                      color: [1,0,0]
                      radius:1
                      radiusMax:25
                    }
                    /*
                    Points {
                        RadiusParam { 
                          value: 1
                          step: 0.25
                          text: "размер ядрышек"
                        }
                        color: [1,0,0]
                    }
                    */
                }

            } // zfilter
         //} // rot

    } // geoload

    /////////////// Работа с выбором 
    
    property var selectedTetra
    onSelectedTetraChanged: {
      selTetraCombo.selected = selectedTetra;
    }

    TetraComboChooser {
      id: selTetraCombo
      source: tetra
      onSelectedChanged: selectedTetra = selected;
      seltetra.color: [1,0,1]
      tetrap.text: "Выбранная ячейка"
    }

    TetraMouseChooser {
      id: selTetraMouse
      source: tetra
      onSelectedChanged: {
        selectedTetra = selected;
        //selectedTetra = (selected === null ? -1 : tetraz.originalTetraNumbers[ selected ])
      }
      //enabled: false
      //togetherWith: [selPointMouse,selTetraMouseHilited ]
    }

    ///////////////////////////////////////////////////////////////////////
  
    property var sceneColor2: 0x006000
    Binding {
      target: theScene.rootScene
      property: "sceneColor"
      value: sceneColor2
    }

    Param {
        id: oCal
        title: "цветность огурца"
        value: 40
        onValueChanged: theScene.sceneColor2 = [0,value/100,0]
    }    

    /////////////////////////////////// шейдер тряски

    TheShader {
      id: shader1 
    }
      
}
